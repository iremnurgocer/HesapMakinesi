@{
    ViewData["Title"] = "Home Page";
}

<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Hesap Makinesi</title>
    <style>

        .hesapMakinesi-keys {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 20px;
            padding: 20px
        }

        .hesapMakinesi {
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 400px;
            position: absolute;
        }

        .hesapMakinesi-input {
            width: 100%;
            height: 70px;
            border: none;
            text-align: right;
            padding: 30px;
        }
    </style>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    

</head>
<body>
    <div class="hesapMakinesi">
        <form class="form-group">
            <input type="text" class="hesapMakinesi-input h1" disabled>

            <div class="hesapMakinesi-keys">
                <button type="button" class="operator btn btn-success" value="+">+</button>
                <button type="button" class="operator btn btn-success" value="-">-</button>
                <button type="button" class="operator btn btn-success" value="*">&times;</button>
                <button type="button" class="operator btn btn-success" value="/">&divide;</button>

                <button type="button" class="btn btn-success" value="7">7</button>
                <button type="button" class="btn btn-success" value="8">8</button>
                <button type="button" class="btn btn-success" value="9">9</button>

                <button type="button" class="btn btn-success" value="4">4</button>
                <button type="button" class="btn btn-success" value="5">5</button>
                <button type="button" class="btn btn-success" value="6">6</button>

                <button type="button" class="btn btn-success" value="1">1</button>
                <button type="button" class="btn btn-success" value="2">2</button>
                <button type="button" class="btn btn-success" value="3">3</button>

                <button type="button" class="btn btn-success" value="0">0</button>

                <button type="button" class="history btn btn-success"><a asp-controller="Home" asp-action="history">AC</a></button>

                <button type="button" class="clear btn btn-success" value="clear">C</button>

                <button type="button" class="equal-sign operator btn btn-success" value="=">=</button>

            </div>
        </form>
    </div>
</body>

</html>

<script >

    const display = document.querySelector('.hesapMakinesi-input');
    const keys = document.querySelector('.hesapMakinesi-keys');

    let displayValue = '0';
    let firstValue = null;
    let operator = null;
    let waitingForSecondValue = false;


    updateDisplay();

    function updateDisplay() {
        display.value = displayValue;
    }

    keys.addEventListener('click', function (e) {
        const element = e.target;

        if (!element.matches('button')) return;

        if (element.classList.contains('operator')) {
            var fir = firstValue;
            var firs = displayValue;
            var op = operator;
            handleOperator(element.value);
            updateDisplay();
            if (element.value === '=') {
                var his = [fir, op, firs, displayValue];

                console.log(his);//veritabanı kayıt
            }

            return;
        }

        if (element.classList.contains('clear')) {
            clear();
            updateDisplay();
            return;
        }

        inputNumber(element.value);
        updateDisplay();
    });

    function handleOperator(nextOperator) {
        const value = parseFloat(displayValue);

        if (operator && waitingForSecondValue) {
            operator = nextOperator;
            return;
        }

        if (firstValue === null) {
            firstValue = value;
        } else if (operator) {
            const result = calculate(firstValue, value, operator);
            
            displayValue = `${parseFloat(result.toFixed(7))}`;
            firstValue = result;
            
        }

        waitingForSecondValue = true;
        operator = nextOperator;

        console.log(displayValue, firstValue, operator, waitingForSecondValue);
    }

    function calculate(first, second, operator) {
        if (operator === '+') {

            return first + second;
        } else if (operator === '-') {
            return first - second;
        } else if (operator === '*') {
            return first * second
        } else if (operator === '/') {
            return first / second;
        }
        return second;
    }
    function history(first, second, operator) {
        return first;
    }

    function inputNumber(num) {
        if (waitingForSecondValue) {
            displayValue = num;
            waitingForSecondValue = false;
        } else {
            displayValue = displayValue === '0' ? num : displayValue + num;
        }

        console.log(displayValue, firstValue, operator, waitingForSecondValue);
    }

    function clear() {
        displayValue = '0';
    }

</script>